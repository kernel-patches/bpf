name: bpf-ci

on:
  pull_request:
  push:
    branches:
      - bpf_base
      - bpf-next_base

env:
  veristat_arch: x86_64
  veristat_toolchain: gcc

concurrency:
  group: ci-test-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  set-matrix:
    # FIXME: set-matrix is lightweight, run it on any self-hosted machines for kernel-patches org
    # so we do not wait for GH hosted runners when there potentially all are busy because of bpf-rc
    # repo for instance.
    # This could be somehow fixed long term by making this action/workflow re-usable and letting the called
    # specify what to run on.
    runs-on: ${{ github.repository_owner == 'kernel-patches' && 'x86_64' || 'ubuntu-latest' }}
    outputs:
      build-matrix: ${{ steps.set-matrix-impl.outputs.build_matrix }}
      test-matrix: ${{ steps.set-matrix-impl.outputs.test_matrix }}
      veristat-runs-on: ${{ steps.set-matrix-impl.outputs.veristat_runs_on }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix-impl
        run: |
          python3 .github/scripts/matrix.py
  build:
    name: build for ${{ matrix.arch }} with ${{ matrix.toolchain_full }}
    needs: set-matrix
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 100
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-matrix.outputs.build-matrix) }}
    env:
      KERNEL: ${{ matrix.kernel }}
      REPO_ROOT: ${{ github.workspace }}
      REPO_PATH: ""
      KBUILD_OUTPUT: kbuild-output/
    steps:
      - uses: actions/checkout@v3
        # We fetch an actual bit of history here to facilitate incremental
        # builds (which may check out some earlier upstream change).
        with:
          fetch-depth: 50
      - if: ${{ github.repository == 'kernel-patches/vmtest' }}
        name: Download bpf-next tree
        uses: libbpf/ci/get-linux-source@main
        with:
          dest: '.kernel'
      - if: ${{ github.repository == 'kernel-patches/vmtest' }}
        name: Move linux source in place
        shell: bash
        run: |
          rm -rf .kernel/.git
          cp -rf .kernel/. .
          rm -rf .kernel
      - name: Get commit meta-data
        id: get-commit-metadata
        run: |
          bash .github/scripts/get-commit-metadata.sh
      - name: Pull recent KBUILD_OUTPUT contents
        uses: actions/cache@v3
        with:
          path: ${{ env.KBUILD_OUTPUT }}
          key: kbuild-output-${{ matrix.arch }}-${{ matrix.toolchain_full }}-${{ steps.get-commit-metadata.outputs.branch }}-${{ steps.get-commit-metadata.outputs.timestamp }}-${{ steps.get-commit-metadata.outputs.commit }}
          restore-keys: |
            kbuild-output-${{ matrix.arch }}-${{ matrix.toolchain_full }}-${{ steps.get-commit-metadata.outputs.branch }}-${{ steps.get-commit-metadata.outputs.timestamp }}-
            kbuild-output-${{ matrix.arch }}-${{ matrix.toolchain_full }}-${{ steps.get-commit-metadata.outputs.branch }}-
            kbuild-output-${{ matrix.arch }}-${{ matrix.toolchain_full }}-
      - name: Prepare incremental build
        shell: bash
        run: |
          bash .github/scripts/prepare-incremental-builds.sh ${{ steps.get-commit-metadata.outputs.commit }}
      - uses: libbpf/ci/patch-kernel@main
        with:
          patches-root: '${{ github.workspace }}/ci/diffs'
          repo-root: '${{ github.workspace }}'
      - name: Setup build environment
        uses: libbpf/ci/setup-build-env@main
        with:
          llvm-version: ${{ matrix.llvm-version }}
      - name: Build kernel image
        uses: libbpf/ci/build-linux@main
        with:
          arch: ${{ matrix.arch }}
          toolchain: ${{ matrix.toolchain }}
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          max-make-jobs: 32
          llvm-version: ${{ matrix.llvm-version }}
      - name: Build selftests
        uses: libbpf/ci/build-selftests@main
        with:
          toolchain: ${{ matrix.toolchain }}
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          max-make-jobs: 32
          llvm-version: ${{ matrix.llvm-version }}
      - if: ${{ github.event_name != 'push' }}
        name: Build samples
        uses: libbpf/ci/build-samples@main
        with:
          toolchain: ${{ matrix.toolchain }}
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          max-make-jobs: 32
          llvm-version: ${{ matrix.llvm-version }}
      - name: Tar artifacts
        run: |
          bash .github/scripts/tar-artifact.sh ${{ matrix.arch }} ${{ matrix.toolchain_full }}
      - if: ${{ github.event_name != 'push' }}
        name: Remove KBUILD_OUTPUT content
        shell: bash
        run: |
          # Remove $KBUILD_OUTPUT to prevent cache creation for pull requests.
          # Only on pushed changes are build artifacts actually cached, because
          # of github.com/actions/cache's cache isolation logic.
          rm -rf "${KBUILD_OUTPUT}"
      - uses: actions/upload-artifact@v3
        with:
          name: vmlinux-${{ matrix.arch }}-${{ matrix.toolchain_full }}
          if-no-files-found: error
          path: vmlinux-${{ matrix.arch }}-${{ matrix.toolchain_full }}.tar.zst
  test:
    if: ${{ github.event_name != 'push' }}
    name: ${{ matrix.test }} on ${{ matrix.arch }} with ${{ matrix.toolchain_full }}
    needs: [set-matrix, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set-matrix.outputs.test-matrix) }}
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 100
    env:
      KERNEL: ${{ matrix.kernel }}
      REPO_ROOT: ${{ github.workspace }}
      REPO_PATH: ""
      KBUILD_OUTPUT: kbuild-output/
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: vmlinux-${{ matrix.arch }}-${{ matrix.toolchain_full }}
          path: .
      - name: Untar artifacts
        # zstd is installed by default in the runner images.
        run: zstd -d -T0  vmlinux-${{ matrix.arch }}-${{ matrix.toolchain_full }}.tar.zst --stdout | tar -xf -
      - name: Prepare rootfs
        uses: libbpf/ci/prepare-rootfs@main
        with:
          project-name: 'libbpf'
          arch: ${{ matrix.arch }}
          kernel: ${{ matrix.kernel }}
          kernel-root: '.'
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          image-output: '/tmp/root.img'
          test: ${{ matrix.test }}
      - name: Run selftests
        uses: libbpf/ci/run-qemu@main
        continue-on-error: ${{ matrix.continue_on_error }}
        timeout-minutes: ${{ matrix.timeout_minutes }}
        with:
          arch: ${{ matrix.arch}}
          img: '/tmp/root.img'
          vmlinuz: '${{ github.workspace }}/vmlinuz'
          kernel-root: '.'
          max-cpu: 8
          kernel-test: ${{ matrix.test }}
  veristat:
    name: veristat
    needs: [set-matrix, build]
    runs-on: ${{ fromJSON(needs.set-matrix.outputs.veristat-runs-on) }}
    timeout-minutes: 100
    env:
      KERNEL: LATEST
      REPO_ROOT: ${{ github.workspace }}
      REPO_PATH: ""
      KBUILD_OUTPUT: kbuild-output/
    steps:
      - name: Setup environment variables
        run: |
            echo arch_and_tool=${{ env.veristat_arch }}-${{ env.veristat_toolchain }} > \
              ${GITHUB_ENV}
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: vmlinux-${{ env.arch_and_tool }}
          path: .
      - name: Untar artifacts
        # zstd is installed by default in the runner images.
        run: zstd -d -T0  vmlinux-${{ env.arch_and_tool }}.tar.zst --stdout | tar -xf -

      - name: Prepare rootfs
        uses: libbpf/ci/prepare-rootfs@main
        with:
          project-name: 'libbpf'
          arch: x86_64
          kernel: LATEST
          kernel-root: '.'
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          image-output: '/tmp/root.img'
          test: run_veristat

      - name: Run veristat
        uses: libbpf/ci/run-qemu@main
        timeout-minutes: 10
        with:
          arch: x86_64
          img: '/tmp/root.img'
          vmlinuz: '${{ github.workspace }}/vmlinuz'
          kernel-root: '.'
          max-cpu: 8
          kernel-test: run_veristat
          output-dir: '${{ github.workspace }}'

      # veristat.csv is produced by run-qemu run_veristat action
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.arch_and_tool }}-veristat-log
          if-no-files-found: error
          path: '${{ github.workspace }}/veristat.csv'

      # For pull request:
      # - get baseline log from cache
      # - compare it to current run
      - if: ${{ github.event_name == 'pull_request' }}
        uses: actions/cache/restore@v3
        with:
          key: ${{ env.arch_and_tool }}-veristat-baseline
          restore-keys: |
            ${{ env.arch_and_tool }}-veristat-baseline-
          path: '${{ github.workspace }}/veristat-baseline.csv'

      - if: ${{ github.event_name == 'pull_request' }}
        name: Show veristat comparison
        run: |
          bash .github/scripts/show-veristat-comparison.sh

      # For push: just put baseline log to cache
      - if: ${{ github.event_name == 'push' }}
        run: |
          mv '${{ github.workspace }}/veristat.csv' \
             '${{ github.workspace }}/veristat-baseline.csv'

      - if: ${{ github.event_name == 'push' }}
        uses: actions/cache/save@v3
        with:
          key: ${{ env.arch_and_tool }}-veristat-baseline-${{ github.run_id }}
          path: '${{ github.workspace }}/veristat-baseline.csv'
